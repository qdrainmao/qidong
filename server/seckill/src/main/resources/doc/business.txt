1.秒杀业务的核心：库存的处理
2.关于数据落地 mysql nosql(对事务的支持不好)
事务机制依然是目前最可靠的落地方案
3.难点：
mysql : 事务+行级锁
    start tx, update库存数量, insert购买明细, commit
秒杀的难点是如何高效的处理竞争
4.数据库设计：
mybatis mapper自动实现dao接口
api编程方式实现dao接口

mybatis足够的灵活性：自己定制sql,自由传参,结果集自动赋值

5 事务方法嵌套
声明式事务独有的概念
传播行为(默认:propagation_required)(当多个方法调用的时候，有一个新事务加入进来的时候，如果有原有事务则加入已有逻辑中，如果没有则新创建一个)

6 什么时候回滚事务
抛出运行期异常

7 restful规范
GET -> 查询操作
POST -> 添加/修改操作 非幂等
PUT -> 修改操作 幂等（和POST没有严格区别）
DELETE -> 删除操作

8 URL设计： /模块/资源/{标示}/集合1/...
/user/{uid}/friends -> 好友列表
秒杀API：
GET /seckill/list 秒杀列表
GET /secill/{id}/detail 详情页
GET /seckill/time/now 系统时间
POST /seckill/{id}/exposer 暴露秒杀
POST /seckill/{id}/{md5}/execution 执行秒杀

9 requestMapping 中 produces = "application/json" 表明返回给浏览器响应header消息

10 应对高并发
静态资源使用CDN：
1 加速用户获取数据的系统
2 部署在离用户最近的网络节点上
3 命中CDN不需要访问后端服务器
4 大的互联网公司都会自建CDN集群，小的互联网公司都会租用
获取系统时间不用优化：访问一次内存大约10ns，不影响性能

秒杀地址接口分析：
无法使用CDN缓存
适合服务器缓存 redis,1秒10万各qps，集群后可支持百万qps
一致性维护成本低

11测试
一条update压力测试（约4wQPS） 一秒钟卖4w次（高）

12 控制事务行为分析
大量阻塞在行级锁上，导致串行化
qps分析： 一次请求就是 所有sql执行时间+网络延迟时间+可能gc时间 约等于 2ms, qps = 500，不能满足秒杀
行级锁在commit之后释放 =》 优化方向减少行级锁持有时间

网络延迟 ping 同城机房max(1000qps)  异地机房（北京上海）max(70qps)
GC （50ms左右）， max(20qps)，并发越高，GC频率越高

13 update 数据库优化思路
把客户端逻辑放到mysql服务端，避免网络延迟和GC影响
两种解决方案：
一：定制sql方案， 由mysql决定commit还是rollback，如果更新一条就commit，更新0条就rollback，需要修改mysql源码 (大公司的方案)
二：使用存储过程：整个事务在mysql端完成，客户端完成事务会造成性能干扰，秒杀存储过程就能发挥作用了，本质是优化网络延迟和GC干扰，
这只能通过mysql来抗

14 使用redis优化“地址暴露接口”

15 事务优化，锁

16深度优化，事务sql在mysql端执行（存储过程）

17 存储过程：
    1 存储过程优化：事务行级锁持有的时间
    2 不要过度以来存储过程（银行、秒杀会用到存储过程）
    3 简单的逻辑可以应用存储过程
    4 QPS：一个秒杀单6000/QPS